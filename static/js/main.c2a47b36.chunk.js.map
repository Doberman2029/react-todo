{"version":3,"sources":["components/TodoItem.js","components/TodoSort.js","components/TodoItems.js","components/TodoCreator.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","title","description","id","done","useContext","ItemContext","removeTodo","checkHandler","className","type","checked","onChange","onClick","TodoSort","sort","changeHandler","map","el","key","name","current","value","TodoItems","todo","useState","setSort","setCurrent","prev","newArray","filter","length","handleSort","TodoCreator","titelHandler","descriptionHandler","titleInput","descriptionInput","newTodo","validation","trim","e","placeholder","disabled","React","createContext","TodoList","json","localStorage","getItem","initialState","JSON","parse","setTodo","setTitleInput","setDecriptionInput","useEffect","setItem","stringify","target","Date","now","Provider","elementId","elId","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c2a47b36.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\r\nimport { ItemContext } from \"./TodoList\";\r\n\r\nexport default function TodoItem({ title, description, id, done }) {\r\n  const { removeTodo, checkHandler } = useContext(ItemContext);\r\n  return (\r\n    <li className={done ? \"item check\" : \"item\"}>\r\n      <input\r\n        className=\"item__checkbox\"\r\n        type=\"checkbox\"\r\n        checked={done}\r\n        onChange={() => checkHandler(id)}\r\n      />\r\n      <button className=\"item__btn\" onClick={() => removeTodo(id)}>\r\n        &#10006;\r\n      </button>\r\n      <p className=\"item__title\">{title}</p>\r\n      <p className=\"item__description\">{description}</p>\r\n    </li>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function TodoSort({ sort, changeHandler }) {\r\n  return (\r\n    <form>\r\n      {sort.map((el) => (\r\n        <label className=\"sortng__radio\" key={el.name}>\r\n          <input\r\n            className=\"sortng__radio\"\r\n            type=\"radio\"\r\n            name=\"todoSorting\"\r\n            checked={el.current}\r\n            value={el.name}\r\n            onChange={() => changeHandler(el.name)}\r\n          />\r\n          {el.name}\r\n        </label>\r\n      ))}\r\n    </form>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport TodoSort from \"./TodoSort\";\r\n\r\nfunction TodoItems({ todo }) {\r\n  const [sort, setSort] = useState([\r\n    {\r\n      name: \"All\",\r\n      current: true,\r\n    },\r\n    {\r\n      name: \"Completed\",\r\n      current: false,\r\n    },\r\n    {\r\n      name: \"Uncompleted\",\r\n      current: false,\r\n    },\r\n  ]);\r\n\r\n  const [current, setCurrent] = useState(\"All\");\r\n\r\n  const handleCurrentChange = (name) => {\r\n    setSort((prev) =>\r\n      prev.map((el) => ({ ...el, current: el.name === name ? true : false }))\r\n    );\r\n    setCurrent(name);\r\n  };\r\n\r\n  const handleSort = () => {\r\n    let newArray = todo;\r\n    if (current === \"Completed\") {\r\n      newArray = todo.filter((todo) => todo.done === true);\r\n    } else if (current === \"Uncompleted\") {\r\n      newArray = todo.filter((todo) => todo.done === false);\r\n    }\r\n    if (!newArray.length > 0) {\r\n      return <p className=\"items__empty\">You don't have {current} todo</p>;\r\n    }\r\n    return newArray.map(({ id, title, description, done }) => {\r\n      return (\r\n        <TodoItem\r\n          key={id}\r\n          title={title}\r\n          description={description}\r\n          id={id}\r\n          done={done}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TodoSort sort={sort} changeHandler={handleCurrentChange} />\r\n      <ul className=\"items\">{handleSort()}</ul>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoItems;\r\n","import React from \"react\";\r\n\r\nexport default function TodoCreator({\r\n  titelHandler,\r\n  descriptionHandler,\r\n  titleInput,\r\n  descriptionInput,\r\n  newTodo,\r\n}) {\r\n  let validation =\r\n    titleInput.trim().length > 0 && descriptionInput.trim().length > 0\r\n      ? false\r\n      : true;\r\n\r\n  return (\r\n    <form className=\"create__form\">\r\n      <input\r\n        className=\"create__input\"\r\n        onChange={(e) => titelHandler(e)}\r\n        value={titleInput}\r\n        placeholder=\"Title\"\r\n      />\r\n      <input\r\n        className=\"create__input\"\r\n        onChange={(e) => descriptionHandler(e)}\r\n        value={descriptionInput}\r\n        placeholder=\"Description\"\r\n      />\r\n      <button\r\n        className={validation ? \"create__btn disabled\" : \"create__btn\"}\r\n        onClick={newTodo}\r\n        disabled={validation}\r\n      >\r\n        Click me for create new todo!\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TodoItems from \"./TodoItems\";\r\nimport TodoCreator from \"./TodoCreator\";\r\n\r\nexport const ItemContext = React.createContext();\r\n\r\nexport default function TodoList() {\r\n  let json = localStorage.getItem(\"todoList\");\r\n  let initialState = json ? JSON.parse(json) : [];\r\n\r\n  const [todo, setTodo] = useState(initialState);\r\n  const [titleInput, setTitleInput] = useState(\"\");\r\n  const [descriptionInput, setDecriptionInput] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todoList\", JSON.stringify(todo));\r\n  }, [todo]);\r\n\r\n  const titleInputHandler = (e) => {\r\n    setTitleInput(e.target.value);\r\n  };\r\n  const descriptionInputHandler = (e) => {\r\n    setDecriptionInput(e.target.value);\r\n  };\r\n  const createTodoHandler = () => {\r\n    setTodo((prev) => [\r\n      ...prev,\r\n      {\r\n        id: Date.now(),\r\n        title: titleInput,\r\n        description: descriptionInput,\r\n        done: false,\r\n      },\r\n    ]);\r\n    setTitleInput(\"\");\r\n    setDecriptionInput(\"\");\r\n  };\r\n  const removeTodo = (elementId) => {\r\n    setTodo(todo.filter((el) => el.id !== elementId));\r\n  };\r\n  const checkHandler = (elId) => {\r\n    setTodo((prev) =>\r\n      prev.map((el) => ({ ...el, done: el.id === elId ? !el.done : el.done }))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"list\">\r\n      <TodoCreator\r\n        titelHandler={titleInputHandler}\r\n        descriptionHandler={descriptionInputHandler}\r\n        titleInput={titleInput}\r\n        descriptionInput={descriptionInput}\r\n        newTodo={createTodoHandler}\r\n      />\r\n      {todo.length > 0 ? (\r\n        <ItemContext.Provider value={{ removeTodo, checkHandler }}>\r\n          <TodoItems todo={todo} />\r\n        </ItemContext.Provider>\r\n      ) : (\r\n        <h2 className=\"list__empty\">Here will be your todo!</h2>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  return <TodoList />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}